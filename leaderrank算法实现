setwd('d:/rdata/rcode')
library(Matrix)
#该函数是读入数据并生成邻接矩阵
load_data_pair <- function(link_file){
  data<-read.table(link_file,head=TRUE)
  names(data) <- c('from', 'to')
  fid <- unique(data$from)
  tid <- unique(data$to)
  #确定节点集并排序
  uid <- sort(union(fid, tid))
  #添加一个背景节点，将节点集的长度扩充至mlen
  mlen <- length(uid)+1
  #建立一个mlen*mlen且值0和1的邻接矩阵
  A <- Matrix(data=0, nrow=mlen, ncol=mlen)
  fidx <- match(data[[1]], uid, nomatch=0)
  tidx <- match(data[[2]], uid, nomatch=0)
  idx <- matrix(c(fidx, tidx), ncol=2)#生成mlen行2列的矩阵
  A[idx] <- 1
  A[mlen,]<- 1
  A[,mlen] <- 1
  return(list(A, uid))}
#该函数是leaderrank算法
leaderrank <- function(A){
  N <- nrow(A) - 1
  #根据邻接矩阵A生成概率转移矩阵M
  K <- Diagonal(x=1/rowSums(A))
  M <- t(K %*% A)
  #给N+1个节点赋予初值
  R0 <- matrix(1, nrow=N+1, ncol=1)
  R0[N+1,1] <- 0
  #给定收敛停止精度和最大迭代次数
  EPS <- 0.0001
  MAXITER <- 100
  #执行循环得到收敛的最终的R值
  for(i in 1:MAXITER){
    R <- M %*% R0
    e <- sum(abs(R-R0))
    cat(paste('iteration', i, 'error', e), '\n')
    if(e < EPS) break
      R0 <- R}
  #把第N+1个节点的得分均分给其他N个节点并输出得分向量R
  sg <- R[N+1,1]/N
  Rsg <- matrix(sg, nrow=N+1, ncol=1)
  Rsg[N+1,1] <- 0
  R <- R + Rsg
  R <- as.vector(R)
  length(R) <- N
  return(R)}
#该函数标准化最后的leaderrank得分，使其得分区间为[0.10]
adjust_rank <- function(R, lt=0, ht=10){
  MIN_NUM <- 0.0000001
  if(min(R) == 0) R <- R+MIN_NUM
    R <- log(R)
    min_r <- min(R)
    max_r <- max(R)
    R <- (ht-lt)*(R - min_r)/(max_r-min_r) + lt
    return(R)}
#主函数根据输入数据运算以上所有函数并输出结果
ranking <- function(in_link, out_rank){
  #执行第一个函数load_data_pair
  ret <- load_data_pair(in_link)
  A <- ret[[1]]
  uid <- ret[[2]]
  #执行第二个函数leaderrank
  pr <- leaderrank(A)
  #执行第三个函数adjust_rank
  pr <- adjust_rank(pr)
  #输出得分排名
  ix <- sort(pr, index.return=TRUE, decreasing=TRUE)$ix
  out <- paste(seq(1, length(uid)), uid[ix], sprintf('%.4f', pr[ix]), sep=',')
  #写入数据文本保存
  write.table(out, file=out_rank, quote=FALSE, col.names=FALSE, row.names=FALSE)
  return(pr,out)}

ranking('tv_link.txt', 'tv_leaderrank.txt')
